% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quantforesterror.R
\name{quantForestError}
\alias{quantForestError}
\title{Quantify random forest prediction error}
\usage{
quantForestError(forest, X.train, X.test, alpha = 0.05,
  conservative = TRUE, rcpp = FALSE)
}
\arguments{
\item{forest}{The random forest object being used for prediction.}

\item{X.train}{A \code{matrix} or \code{data.frame} with the observations
that were used to train \code{forest}; each row should be an observation,
and each column should be a predictor variable.}

\item{X.test}{A \code{matrix} or \code{data.frame} with the observations to
be predicted; each row should be an observation, and each column should be
a predictor variable.}

\item{alpha}{The type-I error rate desired for the conditional prediction
intervals; set to \code{NA} if no prediction intervals are desired.
Defauls to \code{0.05}.}

\item{conservative}{A \code{logical} indicating whether a second set of
conditional prediction intervals should be estimated in which ties in the
empirical error distribution should be resolved conservatively or not.
Defaults to \code{TRUE}.}

\item{rcpp}{A \code{logical} indicating whether the weights should be
computed using \code{Rcpp}. Recommended if the number of training
observations, test observations, or trees is large. Defauls to \code{FALSE}.}
}
\value{
A list with the following possible elements, each in the form of a
  vector, as described in the details section:

  \item{pred}{The random forest predictions of the test observations}
  \item{error}{The estimated conditional mean square prediction errors of
  the random forest predictions}
  \item{lower}{The estimated lower bounds of the conditional prediction
  intervals for the test observations}
  \item{upper}{The estimated upper bounds of the conditional prediction
  intervals for the test observations}
  \item{lowerCons}{The conservatively estimated lower bounds of the
  conditional prediction intervals for the test observations}
  \item{upperCons}{The conservatively estimated upper bounds of the
  conditional prediction intervals for the test observations}
}
\description{
Estimates the conditional mean squared prediction errors and conditional
prediction intervals of random forest predictions.
}
\details{
Three possible sets of outputs are possible from this function depending
on the user's arguments for \code{alpha} and \code{conservative}.

The most minimal output is a list containing the random forest predictions of
the test observations and the estimated conditional mean squared prediction
errors associated with each. This can be obtained by setting \code{alpha}
to \code{NA}.

The second possible output is a list that includes, in addition to the
random forest predictions and the estimated prediction errors, conditional
prediction intervals for each test observation with level specified by
\code{alpha}. This can be obtained by setting \code{alpha} to a numeric
value and setting \code{conservative} to \code{FALSE}.

The most extensive set of outputs includes, in addition to the above, a
second set of prediction intervals generated by resolving ties in the
empirical error distribution conservatively. Conservatively estimated
prediction intervals may be desirable when the number of observations is
relatively small. This output can be obtained by setting \code{alpha} to a
numeric value and setting \code{conservative} to \code{TRUE}.
}
\examples{
# load data
data(airquality)

# remove observations with missing predictor variable values
airquality <- airquality[complete.cases(airquality), ]

# get number of observations and the response column index
n <- nrow(airquality)
response.col <- 1

# split data into training and test sets
train.ind <- sample(1:n, n * 0.9, replace = FALSE)
Xtrain <- airquality[train.ind, -response.col]
Ytrain <- airquality[train.ind, response.col]
Xtest <- airquality[-train.ind, -response.col]
Ytest <- airquality[-train.ind, response.col]

# fit random forest to the training data
rf <- randomForest::randomForest(Xtrain, Ytrain, nodesize = 10,
                                 ntree = 500, keep.inbag = TRUE)

# get conditional mean squared prediction errors and prediction
# intervals for the test observations
test.preds <- quantForestError(rf, Xtrain, Xtest)

# get the same as above but without the conservative prediction
# intervals
test.preds <- quantForestError(rf, Xtrain, Xtest, conservative = FALSE)

# get just the mean squared prediction error estimates
test.preds <- quantForestError(rf, Xtrain, Xtest, alpha = NA)

}
\author{
Benjamin Lu \code{<b.lu@berkeley.edu>}; Johanna Hardin \code{<jo.hardin@pomona.edu>}
}
